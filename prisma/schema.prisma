// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  isInstructor      Boolean            @default(false)
  instructorProfile InstructorProfile?
  refreshToken      RefreshToken[]
  enrollments       Enrollment[]
  completedLecture  CompletedLecture[]
  courseReviews     CourseReview[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @unique
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([userId])
}

model InstructorProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String?
  expertise      String?
  createdCourses Course[] @relation("InstructorToCourse")
  website        String?
  socialLinks    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Course {
  id            String            @id @default(uuid())
  title         String
  description   String
  instructorId  String
  instructor    InstructorProfile @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: Cascade)
  sessions      Session[]
  enrollments   Enrollment[]
  categoryId    String
  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  courseReviews CourseReview[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([instructorId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String    @id @default(uuid())
  sessionOrder Int
  title        String
  courseId     String
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures     Lecture[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([courseId])
}

model Lecture {
  id               String             @id @default(uuid())
  lectureOrder     Int
  title            String
  lectureUrl       String
  description      String
  isPreview        Boolean            @default(false)
  sessionId        String
  session          Session            @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  completedLecture CompletedLecture[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([sessionId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([courseId])
  @@index([userId])
}

model CompletedLecture {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId   String
  lecture     Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@unique([userId, lectureId])
  @@index([userId])
  @@index([lectureId])
}

model CourseReview {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
}
