// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  isInstructor      Boolean            @default(false)
  profilePicture    String?
  instructorProfile InstructorProfile?
  refreshToken      RefreshToken[]
  Enrollments       Enrollment[]
  sessions          CompletedSession[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RefreshToken {
  id           String   @id @default(uuid())
  refreshToken String   @unique
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([userId])
}

model InstructorProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio            String?
  expertise      String?
  createdCourses Course[] @relation("InstructorToCourse")
  website        String?
  socialLinks    Json?
  rating         Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Course {
  id           String            @id @default(uuid())
  title        String
  description  String
  category     String
  instructorId String
  instructor   InstructorProfile @relation("InstructorToCourse", fields: [instructorId], references: [id], onDelete: Cascade)
  sessions     Session[]
  enrollments  Enrollment[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([instructorId])
}

model Session {
  id                String             @id @default(uuid())
  title             String
  videoUrl          String
  description       Json
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  completedSessions CompletedSession[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([courseId])
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([courseId])
  @@index([userId])
}

model CompletedSession {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String   @unique
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  completedAt DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
}
